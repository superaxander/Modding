import org.apache.tools.ant.filters.ReplaceTokens

group 'com.example.examplemod'
version '1.0.0'

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'application'

sourceCompatibility = targetCompatibility = 1.8

repositories {
    mavenCentral()
    maven {
        url 'https://maven.chaosfield.at'
    }
}

dependencies {
    compile group: 'de.ellpeck.rockbottom', name: 'RockBottomAPI', version: '+'
    runtime fileTree("./gamedata")
}

task processSources(type: Copy) {
    from sourceSets.main.allSource
    into 'build/processedSrc'
    filter(ReplaceTokens, tokens: ["VERSION": version])
}

compileJava {
    dependsOn(processSources)
    source = processSources.destinationDir
}

mainClassName = "de.ellpeck.rockbottom.Main"

run {
    dependsOn(compileJava)
    args = ["--unpackedModsDir", "./build/classes/main", "--tempDir", "./build/temp"]
}

// You should not use these tasks! Distribution of the game jar is not allowed!
assembleDist.setEnabled(false)
distTar.setEnabled(false)
distZip.setEnabled(false)
installDist.setEnabled(false)

task createIntelliJRuns {
    group = 'ide'
    description = 'Creates the project run configuration for IntelliJ IDEA'
    def file = new File("$projectDir", ".idea" + File.separator + "runConfigurations" + File.separator + "Launch RB.xml")
    if (!file.exists()) {
        file.getParentFile().mkdirs()
        file.createNewFile()
    }
    file.setText("<component name=\"ProjectRunConfigurationManager\">\n" +
            "    <configuration default=\"false\" name=\"Launch RB\" type=\"GradleRunConfiguration\" factoryName=\"Gradle\">\n" +
            "        <ExternalSystemSettings>\n" +
            "            <option name=\"executionName\" />\n" +
            "            <option name=\"externalProjectPath\" value=\"\$PROJECT_DIR\$\" />\n" +
            "            <option name=\"externalSystemIdString\" value=\"GRADLE\" />\n" +
            "            <option name=\"scriptParameters\" />\n" +
            "            <option name=\"taskDescriptions\">\n" +
            "               <list />\n" +
            "            </option\n>" +
            "            <option name=\"taskNames\">\n" +
            "               <list>\n" +
            "            <option value=\"run\" />" +
            "               </list>\n" +
            "            </option>\n" +
            "            <option name=\"vmOptions\" />\n" +
            "        </ExternalSystemSettings>\n" +
            "        <method />\n" +
            "    </configuration>\n" +
            "</component>", "UTF-8")
}

task createEclipseRuns {
    group = 'ide'
    description = 'Creates the project run configuration for Eclipse'
    def file = new File("$projectDir", "Launch Default.launch")
    if (!file.exists()) {
        file.getParentFile().mkdirs()
        file.createNewFile()
    }
    file.setText("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n" +
            "<launchConfiguration type=\"org.eclipse.jdt.launching.localJavaApplication\">\n" +
            "<listAttribute key=\"org.eclipse.debug.core.MAPPED_RESOURCE_PATHS\">\n" +
            "<listEntry value=\"/Launch Default\"/>\n" +
            "</listAttribute>\n" +
            "<listAttribute key=\"org.eclipse.debug.core.MAPPED_RESOURCE_TYPES\">\n" +
            "<listEntry value=\"4\"/>\n" +
            "</listAttribute>\n" +
            "<listAttribute key=\"org.eclipse.debug.ui.favoriteGroups\">\n" +
            "<listEntry value=\"org.eclipse.debug.ui.launchGroup.debug\"/>\n" +
            "<listEntry value=\"org.eclipse.debug.ui.launchGroup.run\"/>\n" +
            "</listAttribute>\n" +
            "<stringAttribute key=\"org.eclipse.jdt.launching.MAIN_TYPE\" value=\"de.ellpeck.rockbottom.Launcher\"/>\n" +
            "<stringAttribute key=\"org.eclipse.jdt.launching.PROGRAM_ARGUMENTS\" value=\"--unpackedModsDir ./build/classes/main\"/>\n" +
            "<stringAttribute key=\"org.eclipse.jdt.launching.PROJECT_ATTR\" value=\"$project.name\"/>\n" +
            "</launchConfiguration>", "UTF-8")
    file = new File("$projectDir", "Launch Debug.launch")
    if (!file.exists()) {
        file.getParentFile().mkdirs()
        file.createNewFile()
    }
    file.setText("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n" +
            "<launchConfiguration type=\"org.eclipse.jdt.launching.localJavaApplication\">\n" +
            "<listAttribute key=\"org.eclipse.debug.core.MAPPED_RESOURCE_PATHS\">\n" +
            "<listEntry value=\"/Launch Debug\"/>\n" +
            "</listAttribute>\n" +
            "<listAttribute key=\"org.eclipse.debug.core.MAPPED_RESOURCE_TYPES\">\n" +
            "<listEntry value=\"4\"/>\n" +
            "</listAttribute>\n" +
            "<listAttribute key=\"org.eclipse.debug.ui.favoriteGroups\">\n" +
            "<listEntry value=\"org.eclipse.debug.ui.launchGroup.debug\"/>\n" +
            "<listEntry value=\"org.eclipse.debug.ui.launchGroup.run\"/>\n" +
            "</listAttribute>\n" +
            "<stringAttribute key=\"org.eclipse.jdt.launching.MAIN_TYPE\" value=\"de.ellpeck.rockbottom.Main\"/>\n" +
            "<stringAttribute key=\"org.eclipse.jdt.launching.PROGRAM_ARGUMENTS\" value=\"--unpackedModsDir ./build/classes/main --tempDir ./build/temp\"/>\n" +
            "<stringAttribute key=\"org.eclipse.jdt.launching.PROJECT_ATTR\" value=\"$project.name\"/>\n" +
            "</launchConfiguration>", "UTF-8")
}
